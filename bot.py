import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "7555374568:AAGXG4EV_KGiTD56o2a5IoQ-5BZIZHc16Kc"
OPENROUTER_API_KEY = "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"
MODEL = "mistralai/mistral-7b-instruct"  # –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä—É—Å—Å–∫–∏–º

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
SYSTEM_PROMPT = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º. 
–î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."""

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üü¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞, –Ω–∞–ª–æ–≥–∞—Ö, –¥–æ–≥–æ–≤–æ—Ä–∞—Ö –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –Ω–∞–ª–æ–≥–∏ —É –û–û–û?\n"
        "‚Ä¢ –ù—É–∂–µ–Ω –ª–∏ –¥–æ–≥–æ–≤–æ—Ä —Å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–º?"
    )

@dp.message()
async def handle_message(message: Message):
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(message.chat.id, "typing")
        
        completion = client.chat.completions.create(
            extra_headers={
                "HTTP-Referer": "https://t.me/",
                "X-Title": "Legal Business Assistant",
            },
            model=MODEL,
            temperature=0.3,  # –î–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            max_tokens=500,   # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": message.text}
            ]
        )
        
        # –ß–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = completion.choices[0].message.content
        response = response.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        response = response.split('\n')[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("üî¥ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())